import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Step 1: Generate a toy classification dataset
X, y = make_classification(n_samples=1000, n_features=2, n_redundant=0,
                           n_clusters_per_class=1, class_sep=1.5, flip_y=0.1, random_state=42)

# Convert labels from {0, 1} to {-1, 1} for SVM compatibility
y = np.where(y == 0, -1, 1)

# Step 2: Normalize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Step 3: Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Define SVM Class with Gradient Descent and Hinge Loss
class SVM:
    def __init__(self, learning_rate=0.001, lambda_param=0.01, n_iters=1000):
        self.lr = learning_rate
        self.lambda_param = lambda_param  # Regularization strength
        self.n_iters = n_iters
        self.w = None
        self.b = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.w = np.zeros(n_features)
        self.b = 0

        for _ in range(self.n_iters):
            for idx, x_i in enumerate(X):
                condition = y[idx] * (np.dot(x_i, self.w) + self.b) >= 1
                if condition:
                    dw = self.lambda_param * self.w
                    db = 0
                else:
                    dw = self.lambda_param * self.w - y[idx] * x_i
                    db = -y[idx]

                self.w -= self.lr * dw
                self.b -= self.lr * db

    def predict(self, X):
        linear_output = np.dot(X, self.w) + self.b
        return np.sign(linear_output)

# Step 5: Train the model
model = SVM(learning_rate=0.001, lambda_param=0.01, n_iters=1000)
model.fit(X_train, y_train)

# Step 6: Evaluate the model
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {acc:.4f}")

# Step 7: Visualize decision boundary
def plot_decision_boundary(model, X, y):
    plt.figure(figsize=(8, 6))
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 500),
                         np.linspace(y_min, y_max, 500))
    grid = np.c_[xx.ravel(), yy.ravel()]
    preds = model.predict(grid).reshape(xx.shape)

    plt.contourf(xx, yy, preds, alpha=0.3, cmap=plt.cm.coolwarm)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
    plt.title("SVM Decision Boundary with Gradient Descent")
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.grid(True)
    plt.show()

plot_decision_boundary(model, X_test, y_test)

import time
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC

# Function to train and evaluate a model
def train_and_evaluate(model, X_train, y_train, X_test, y_test, name="Model"):
    start = time.time()
    model.fit(X_train, y_train)
    end = time.time()
    preds = model.predict(X_test)
    acc = accuracy_score(y_test, preds)
    print(f"{name} -> Accuracy: {acc:.4f} | Training Time: {end - start:.4f} seconds")

# Our custom Gradient Descent SVM
print("\n=== Custom Gradient Descent SVM ===")
custom_svm = SVM(learning_rate=0.001, lambda_param=0.01, n_iters=1000)
train_and_evaluate(custom_svm, X_train, y_train, X_test, y_test, name="Custom GD SVM")

# Scikit-learn's SGDClassifier (Stochastic Gradient Descent)
print("\n=== SGDClassifier (sklearn) ===")
sgd_svm = SGDClassifier(loss='hinge', alpha=0.01, max_iter=1000, tol=1e-3)
train_and_evaluate(sgd_svm, X_train, y_train, X_test, y_test, name="SGDClassifier")

# Scikit-learn's SVC (uses SMO optimization)
print("\n=== SVC (libSVM, SMO) ===")
svc_svm = SVC(kernel='linear', C=1.0)
train_and_evaluate(svc_svm, X_train, y_train, X_test, y_test, name="SVC (libSVM)")
